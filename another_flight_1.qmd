---
title: "Mini Project 1"
author: 
  - ALBERT (albertchui)
  - Joseph Zaki (josephzaki)
date: "April 21, 2024"
format: pdf
fontsize: 12pt
number-sections: TRUE
linkcolor: purple
geometry:
  - margin=1in
toc: TRUE
---

# Abstract {#sec-abstract}

\begin{abstract}
When writing an academic-style paper, it is important to include an abstract. The abstract is a short, few-line summary of the paper, and should include major findings and conclusions.
\end{abstract}

```{r, echo = F, results='hide'}
library("tidyverse")
library("pander")
```

# Data Cleaning and EDA {#sec-section1}

## Combining Dataframes 

```{r, echo = F}
vector_flight_data <- c("data/CA_Flights_Jan.csv","data/CA_Flights_Feb.csv","data/CA_Flights_Mar.csv","data/CA_Flights_Apr.csv","data/CA_Flights_May.csv","data/CA_Flights_Jun.csv","data/CA_Flights_Jul.csv","data/CA_Flights_Aug.csv","data/CA_Flights_Sept.csv","data/CA_Flights_Oct.csv","data/CA_Flights_Nov.csv","data/CA_Flights_Dec.csv")

list_flight_data <- lapply(vector_flight_data, FUN = read.csv)

flights <- bind_rows(list_flight_data)

flights %>% dim()
flights[8872282, ]
```

After combining the CA Flight Data for each month into a single dataframe called `flights`, we see from the output of `dim(flights)` that this dataset contains 14 variables on 1267353 observational units (flights) listed below. We also see that missing values are encoded as `NA`.

| VARIABLE | DESCRIPTION |
|----------|:------------|
|Year|This is the year the flight took place, for this dataset, all values are 2023.|
|MONTH|This is the month the flight took place represented as numeric values 1-12 for January-December.|
|DAY_OF_MONTH|This is the day of the month the flight took place represented as numeric values from 1-31.|
|OP_UNIQUE_CARRIER|This is the airline carrier associated with the flight represented as a two character abbreviation.|
|ORIGIN|This is the airport of origin for the flight represented as a three character airport code.|
|DEST|This is the destination airport for the flight represented as a three character airport code.|
|CRS_DEP_TIME|This is the scheduled departure time of the flight represented in 24-hour time.|
|DEP_TIME|This is the actual departure time of the flight represented in 24-hour time.|
|DEP_DELAY|This is the delay in departure time in minutes (DEP_TIME - CRS_DEP_TIME).|
|CRS_ARR_TIME|This is the scheduled arrival time of the flight represented in 24-hour time.|
|ARR_TIME|This is the actual arrival time of the flight represented in 24-hour time.|
|ARR_DELAY|This is the delay in arrival time in minutes (ARR_TIME - CRS_ARR_TIME).|
|CRS_ELAPSED_TIME|This is the scehduled flight duration in minutes.|
|ACTUAL_ELAPSED_TIME|This is the actual flight duration in minutes.|

## Add Airport Information

```{r, echo = F}
airport <- read.csv("data/Airport_Info.csv")

# adding lon and lat airport data to flights 
flights <- left_join(
   flights, 
   airport, 
  by = join_by(`ORIGIN` == `ARPT_ID`)
) %>%
  rename("ORIGIN_ARPT_NAME" = "ARPT_NAME", "lon_origin" = "x", "lat_origin" = "y") %>%
  left_join(
    airport, 
    by = join_by(`DEST` == `ARPT_ID`)
    ) %>%
  rename("DEST_ARPT_NAME" = "ARPT_NAME", "lon_dest" = "x", "lat_dest" = "y")

# making month data more descriptive

month_names <- factor(month.name, ordered = T, levels = month.name)

flights$MONTH <-  month_names[flights$MONTH]
```

## Explore Santa Barbara Airport
In this section we explore flights routing through Santa Barabara Airport (SBA). Below is a list of the 119 airports that had flights routed through SBA in 2023 (including SBA).

```{r, echo = F}
SBA_flights <- filter(flights, `ORIGIN` == "SBA" | `DEST` == "SBA")

origin_SBA <- flights$ORIGIN_ARPT_NAME %>% unique()
dest_SBA <- flights$DEST_ARPT_NAME %>% unique()

unique_flights_SBA <- c(origin_SBA, dest_SBA) %>% unique()
sort(unique_flights_SBA)
```

Below is a map of these airports with SBA highlighted in red.
```{r, echo = F, warning=F}
states <- map_data("state")

SBA_plotting <- data.frame(ARPT_NAME = unique_flights_SBA) %>% 
  left_join(
    airport,
    by = join_by(
      `ARPT_NAME` == `ARPT_NAME`
    )
  ) %>%
  rename("longitude" = x, "latitude" = y)

ggplot(data = SBA_plotting) +
  geom_polygon(data = states,
               aes(x = long, y = lat, group = group),
               fill = "grey90",
               colour = "grey50") +
  coord_quickmap() +
  theme_minimal() +
  geom_point(
    aes(x = longitude, y = latitude)
  ) +
  geom_point(data = filter(SBA_plotting, ARPT_ID == "SBA"),
             aes(x = longitude, y= latitude, col = 'red')) +
  labs(x = "Longitude", y = "Latitude") +
  theme(legend.position = 'None')

```


By plotting the number of flights routing through SBA each month, we can see that the winter months of December through February are typically the slowest, while the late summer and early fall months of August, Septemeber and October are busiest.
```{r, fig.width= 10, echo = F}
MONTH_count <- SBA_flights %>%
  group_by(MONTH) %>%
  summarise(n = n())

ggplot(MONTH_count, aes(MONTH, n)) +
  geom_point() +
  geom_line(aes(as.numeric(MONTH), n)) +
  labs(title = 'Flights per Month', x = 'Month', y = 'No. of Flights')
```


By separating this information over two separate graphs, one for arrival and one for departure, we see that there are exactly the same amounts of flights arriving as departing.
```{r, echo = F, fig.width= 10, warning=F}
SBA_flights %>%
  mutate(ORIGIN_OR_DEST = ifelse(ORIGIN == "SBA", "Departing from SBA", "Arriving in SBA")) %>%
  group_by(MONTH, ORIGIN_OR_DEST) %>%
  summarise(num_flights = n()) %>%
  ggplot(aes(x = MONTH, y = num_flights)) + 
  geom_point() +
  geom_line(aes(as.numeric(MONTH), num_flights))+
  facet_wrap("ORIGIN_OR_DEST") +
  labs(title = "Flights per Month split by Arrival or Departure in SBA", x = "Month", y = "No. of Flights") +
  theme(
    axis.text.x = element_text(angle = 20))
```





```{r}
# SBA_flights %>%
dept_SBA <- filter(SBA_flights, `ORIGIN` == "SBA") %>%
  group_by(MONTH) %>%
  summarise(ORIGIN_SBA = n())
arrive_SBA <- filter(SBA_flights, `DEST` == "SBA") %>%
  group_by(MONTH) %>%
  summarise(DEST_SBA = n()) 

dept_SBA$DEST_SBA <- arrive_SBA$DEST_SBA
arrive_dept_SBA <- dept_SBA

arrive_dept_SBA$SAME <- FALSE

arrive_dept_SBA$SAME <- replace(arrive_dept_SBA$SAME, arrive_dept_SBA$ORIGIN_SBA == arrive_dept_SBA$DEST_SBA, TRUE)

arrive_dept_SBA
```


we want the distribution of arriving flights. how do you do it normally?

```{r}
temp <- SBA_flights
temp$DEST <- paste(temp$DEST, "DEST")

ggplot() +
  geom_boxplot(
    data = SBA_flights, aes(x = `ORIGIN`, y = `ACTUAL_ELAPSED_TIME`)) +
  geom_boxplot(
    data = temp, aes(x = `DEST`, y = `ACTUAL_ELAPSED_TIME`, fill = `YEAR`)) +
  theme(
    axis.text.x = element_text(angle = 20)
  )
```
```{r}
SBA_flights %>%
  ggplot(aes(CRS_DEP_TIME, DEP_DELAY))+
  geom_point()
```
look accross destination airports
there is no relationship at all.
```{r}
SBA_flights %>%
  ggplot(aes(CRS_DEP_TIME, DEP_DELAY, shape = DEST))+
  geom_point() +
  scale_y_log10()
  
```

we can see this a bit easier using facet wrap.
```{r}
SBA_flights %>%
  ggplot(aes(CRS_DEP_TIME, DEP_DELAY, shape = DEST))+
  geom_point() +
  scale_y_log10() +
  facet_wrap("DEST")

```


```{r}
dep_flights <- flights %>%
  group_by(`DEP_TIME`) %>%
  count()

ggplot(dep_flights, aes(DEP_TIME, n)) +
  geom_line()

```


```{r}
arr_flights <- flights %>%
  group_by(`ARR_TIME`) %>%
  count()

ggplot(arr_flights, aes(ARR_TIME, n)) +
  geom_line()


```

```{r}
median_arr <- flights %>%
  group_by(`MONTH`) %>%
  summarise(med = median(ARR_DELAY, na.rm = TRUE))


median_dep <- flights %>%
  group_by(`MONTH`) %>%
  summarise(med = median(DEP_DELAY, na.rm = TRUE))
```